#!/bin/bash
set -e

TZ=${TZ:-Europe/Istanbul}
export TZ

WORKDIR="/workspace"
REPO_URL="https://github.com/guvenchemy/MerkutY_BTK.git"
REPO_DIR="$WORKDIR/MerkutY_BTK"
FRONTEND_DIR="$REPO_DIR/frontend"
LOCK_FILE="$WORKDIR/.repo.lock"

# Backend container IP configuration
BACKEND_HOST=${BACKEND_HOST:-172.19.0.3}
BACKEND_PORT=${BACKEND_PORT:-8000}
API_URL="http://${BACKEND_HOST}:${BACKEND_PORT}"

echo "üåê Frontend Container Ba≈ülatƒ±lƒ±yor..."
echo "üì° Backend API URL: $API_URL"

# Gerekli paketler
echo "üì¶ Sistem paketleri g√ºncelleniyor..."
apt-get update
apt-get install -y git curl
rm -rf /var/lib/apt/lists/*

# Node.js kurulumu (Node 18+ gerekli)
echo "üü¢ Node.js kurulumu kontrol ediliyor..."
if ! command -v node &> /dev/null; then
    echo "üì• Node.js kuruluyor..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt-get install -y nodejs
fi

echo "üîç Node.js ve npm s√ºr√ºmleri:"
node -v
npm -v

# Repo yoksa klonla, varsa g√ºncelle (aynƒ± lock mekanizmasƒ±)
mkdir -p "$WORKDIR"
if [ ! -d "$REPO_DIR/.git" ]; then
  echo "üìÅ Repo bulunamadƒ±, klonlanƒ±yor..."
  while ! ( set -o noclobber; echo "$$" > "$LOCK_FILE" ) 2> /dev/null; do
    echo "‚è≥ Ba≈üka bir s√ºre√ß klonluyor, bekleniyor..."
    sleep 2
  done
  trap 'rm -f "$LOCK_FILE"; exit $?' INT TERM EXIT
  if [ ! -d "$REPO_DIR/.git" ]; then
    git clone "$REPO_URL" "$REPO_DIR"
  fi
  rm -f "$LOCK_FILE"
  trap - INT TERM EXIT
else
  echo "üîÑ Repo mevcut, g√ºncelleniyor..."
  cd "$REPO_DIR"
  git reset --hard
  git pull --ff-only origin main || true
fi

# Frontend dizinine ge√ß
cd "$FRONTEND_DIR"

# Environment dosyasƒ± olu≈ütur (Docker container i√ßin)
echo "‚öôÔ∏è .env.local olu≈üturuluyor..."
cat > .env.local <<EOT
NEXT_PUBLIC_API_URL=${API_URL}
NEXT_PUBLIC_BACKEND_HOST=${BACKEND_HOST}
NEXT_PUBLIC_BACKEND_PORT=${BACKEND_PORT}
NODE_ENV=production
EOT

# next.config.ts dosyasƒ±nƒ± Docker ortamƒ± i√ßin g√ºncelle
echo "üîß next.config.ts Docker yapƒ±landƒ±rmasƒ±..."
cat > next.config.ts <<EOT
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  // Docker container i√ßin hostname ayarlarƒ±
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: '${API_URL}/:path*',
      },
    ];
  },
  
  // Production ayarlarƒ±
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
  
  // Output ayarlarƒ±
  output: 'standalone',
  
  // Asset optimization
  images: {
    unoptimized: true,
  },
};

export default nextConfig;
EOT

# Package.json scripts g√ºncelleme (Docker i√ßin)
echo "üìù package.json scripts g√ºncelleniyor..."
if [ -f package.json ]; then
  # Backup olu≈ütur
  cp package.json package.json.backup
  
  # Docker i√ßin scripts g√ºncelle
  npm pkg set scripts.docker:dev="next dev -H 0.0.0.0 -p 3000"
  npm pkg set scripts.docker:build="next build"
  npm pkg set scripts.docker:start="next start -H 0.0.0.0 -p 3000"
fi

# Node baƒüƒ±mlƒ±lƒ±klarƒ± kurulumu
echo "üìö Node.js paketleri kuruluyor..."
if [ -f package-lock.json ]; then
  npm ci --production=false
else
  npm install
fi

# Build i≈ülemi (production i√ßin)
echo "üèóÔ∏è Frontend build ediliyor..."
npm run build

# Production modunda ba≈ülat
echo "üöÄ Frontend ba≈ülatƒ±lƒ±yor..."
echo "üåê Frontend eri≈üim adresi: http://0.0.0.0:3000"
echo "üì° Backend API: $API_URL"
echo "üîó API Proxy: /api/* -> $API_URL/*"

# Next.js production server ba≈ülat
exec npm run docker:start
